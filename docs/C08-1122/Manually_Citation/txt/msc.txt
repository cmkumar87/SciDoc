Author manuscript, published in "North American Chapter of the Association for Computational Linguistics (NAACL), Atlanta : United 
                                                                                                    States (2013)" 
                                                                   
                                                                           
                                                                           
                                                                           
  Keyphrase Extraction for N-best Reranking in Multi-Sentence Compression 
    
   
   
   
                          Florian Boudin and Emmanuel Morin 
     LINA - UMR CNRS 6241, Universit´ de Nantes, France e
?florian.boudin,emmanuel.morin?@univ-nantes.fr 








            Abstract 
Multi-Sentence Compression (MSC) is the 
task of generating a short single sentence sum- mary from a cluster of related sentences. This paper presents an N-best reranking method based on keyphrase extraction. Compression candidates generated by a word graph-based MSC approach are reranked according to the number and relevance of keyphrases they con- tain. Both manual and automatic evaluations were performed using a dataset made of clus- ters of newswire sentences. Results show that the proposed method significantly improves the informativity of the generated compres- sions. 








problem. Another solution would be to create, for each cluster of related sentences, a concise and ?u- ent fusion of information, re?ecting facts common to all sentences. Originally defined as sentence fu- sion (Barzilay and McKeown, 2005), MSC is a text- to-text generation process in which a novel sentence is produced as a result of summarizing common in- formation across a set of similar sentences. 
  Most of the previous MSC approaches rely on 
syntactic parsers for producing grammatical com- pressions, e.g. (Filippova and Strube, 2008; El- sner and Santhanam, 2011). Recently, (Filippova, 2010) proposed a word graph-based approach which only requires a Part-Of-Speech (POS) tagger and a list of stopwords. The key assumption behind her 

1

Introduction 

approach is that redundancy within the set of related 

Multi-Sentence Compression (MSC) can be broadly 
described as the task of generating a short single sen- tence summary from a cluster of related sentences. It has recently attracted much attention, mostly be- cause of its relevance to single or multi-document extractive summarization. A standard way to gen- erate summaries consists in ranking sentences by importance, cluster them by similarity and select a sentence from the top ranked clusters (Wang et al., 2008). One difficulty is then to generate concise, non-redundant summaries. Selected sentences al- most always contain additional information specific to the documents from which they came, leading to readability issues in the summary. 
  Sentence Compression (SC), i.e. the task of summarizing a sentence while retaining most of the informational content and remaining grammat- ical (Jing, 2000), is a straightforward solution to this 

sentences provides a reliable way of generating in- formative and grammatical sentences. Although this approach seemingly works well, 48% to 60% of the generated sentences are missing important informa- tion about the set of related sentences. In this study, we aim at producing more informative sentences by maximizing the range of topics they cover. 
  Keyphrases are words that capture the main top- 
ics of a document. Extracting keyphrases can benefit various Natural Language Processing tasks such as summarization, information retrieval and question- answering (Kim et al., 2010). In summarization, keyphrases provide semantic metadata that represent the content of a document. Sentences containing the most relevant keyphrases are used to generate the summary (D'Avanzo and Magnini, 2005). In the same way, we hypothesize that keyphrases can be used to better generate sentences that convey the gist 


of the set of related sentences. 
  In this paper, we present a reranking method of N-best multi-sentence compressions based on keyphrase extraction and describe a series of experi- ments conducted on a manually constructed evalua- tion corpus. More precisely, the main contributions 
of our work are as follows: 
 • We extend Filippova (2010)'s word graph- 
based MSC approach to produce well- punctuated and more informative compres- sions. 

 • We investigate the use of automatic Machine 

that redundancy provides a reliable way of gen- 
erating grammatical sentences. First, a directed word graph is constructed from the set of input sen- tences in which nodes represent unique words, de- fined as word and POS tuples, and edges express the original structure of sentences (i.e. word order- ing). Sentence compressions are obtained by find- ing commonly used paths in the graph. Word graph- based MSC approaches were used in different tasks, such as guided microblog summarization (Sharifi et al., 2010), opinion summarization (Ganesan et al., 2010) and newswire summarization (Filippova, 2010). 

Translation (MT) and summarization evalua- tion metrics to evaluate MSC performance. 

2.2 

Keyphrase extraction 


 • We introduce a French evaluation dataset made 
of 40 sets of related sentences along with refer- ence compressions composed by humans. 
  The rest of this paper is organized as follows. We 
first brie?y review the previous work, followed by a description of the method we propose. Next, we give the details of the evaluation dataset we have constructed and present our experiments and results. Lastly, we conclude with a discussion and directions for further work. 

Keyphrases are words that are representative of the 
main content of documents. Extracting keyphrases can benefit various Natural Language Processing tasks such as summarization, information retrieval and question-answering (Kim et al., 2010). Previ- ous works fall into two categories: supervised and unsupervised methods. The idea behind supervised methods is to recast keyphrase extraction as a binary classification task. A model is trained using anno- tated data to determine whether a given phrase is a keyphrase or not (Frank et al., 1999; Turney, 2000). 
  Unsupervised approaches proposed so far have in- 
  
2
2.1 

Related work 
 Multi-sentence compression 

volved a number of techniques, including language modeling (Tomokiyo and Hurst, 2003), graph-based ranking (Mihalcea and Tarau, 2004; Wan and Xiao, 

MSC have received much attention recently and 
many different approaches have been proposed. The pioneering work of (Barzilay and McKeown, 2005) introduced the framework used by many subsequent works: input sentences are represented by depen- dency trees, some words are aligned to merge the 

2008) and clustering (Liu et al., 2009). While super- vised approaches have generally proven more suc- cessful, the need for training data and the bias to- wards the domain on which they are trained remain two critical issues. 

trees into a lattice, and the lattice is linearized using 

3

Method 

tree traversal to produce fusion sentences. (Filip- pova and Strube, 2008) cast MSC as an integer linear program, and show promising results for German. Later, (Elsner and Santhanam, 2011) proposed a su- pervised approach trained on examples of manually 

In this section, we first describe Filippova (2010)'s 
word graph-based MSC approach. Then, we present the keyphrase extraction approach we use and our method for reranking generated compressions. 

fused sentences. 

3.1 

Description of Filippova's approach 

  Previously described approaches require the use of a syntactic parser to control the grammatical- ity of the output. As an alternative, several word graph-based approaches that only require a POS tagger were proposed. The key assumption is 

Let G = (V, E) be a directed graph with the set of vertices (nodes) V and a set of directed edges E, where E is a subset of V?? V. Given a set of re- 
lated sentences S = {s1, s2, ..., sn}, a word graph 
is constructed by iteratively adding sentences to it. 


(3) 



island 

... 




pinta 

to 

be 




last 

the 




's 

of 

his 


   kind 
   
  
  
  
  
  
  
-start- 




the 



giant 



  tortoise 
  

believed 




   known 
   

   
   
the 


world 



 has 
 

 
passed 




away 


  -end- 
  
  
  
a

lonesome 

as 



george 

died 


... 
(2) 



Figure 1: Word graph constructed from the set of related sentences, a possible compression path is also given. 



Figure 1 is an illustration of the word graph con- structed from the following sentences. For clarity, edge weights are omitted and italicized fragments from the sentences are replaced with dots. 

  1. Lonesome George, the world's last Pinta Island 
   giant tortoise, has passed away. 
   
  2. The giant tortoise known as Lonesome George 
died Sunday at the Galapagos National Park in Ecuador. 

  3. He was only about a hundred years old, but 
the last known giant Pinta tortoise, Lonesome George, has passed away. 

  4. Lonesome George, a giant tortoise believed to 
  be the last of his kind, has died. 
  
  At the first step, the graph simply represents one sentence plus the start and end symbols (-start- and -end- in Figure 1). A node is added to G for each word in the sentence, and words adjacent in the sen- tence are connected with directed edges. A word from the following sentences is mapped onto an ex- isting node in the graph if they have the same lower- cased word form and POS and that no word from this sentence has already been mapped onto this node. A new node is created if there is no suitable candidate in the graph. 
  Words are added to the graph in the following or- 
der: 



  i. non-stopwords for which no candidate exists in 
the graph or for which an unambiguous map- 
ping is possible; 

  ii. non-stopwords for which there are either sev- 
eral possible candidates in the graph or which 
occur more than once in the sentence; 

 iii. stopwords. 
 
For the last two groups of words where mapping is ambiguous (i.e. there are two or more nodes in the graph that refer to the same word/POS tuple), the immediate context (the preceding and following words in the sentence and the neighboring nodes in the graph) or the frequency (i.e. the node which has words mapped onto it) are used to select the candi- date node. We use the stopword list included in nltk1 extended with temporal nouns (e.g. monday, yester- day). 
  In Filippova's approach, punctuation marks are excluded. To generate well-punctuated compres- sions, we simply added a fourth step for adding punctuation marks in the graph. When mapping is ambiguous, we select the candidate which has the same immediate context. 
  Once the words from a sentence are added to the graph, words adjacent in the sentence are connected with directed edges. Edge weights are calculated us- ing the weighting function defined in Equation 1. 
  
     1http://nltk.org/ 
   
   


w(i, j) = 


 cohesion(i, j) 
freq(i)?? freq(j) 

freq(i) + freq(j) 



(1) 

dation is recursively computed based on the im- 
portance of the words making the recommendation. Keyphrase extraction can be divided into two steps. First, a weighted graph is constructed from the set of related sentences, in which nodes represent words 

cohesion(i, j) = 

s?S d(s, i, j) 

?1 

(2) 

defined as word and POS tuples. Two nodes (words) 
are connected if their corresponding lexical units co- 

where freq(i) is the number of words mapped to the 
node i. The function d(s, i, j) refers to the distance between the offset positions of words i and j in sen- tence s. 
  The purpose of this function is two fold: i. to generate a grammatical compression, links between words which appear often in this order are favored (see Equation 2); ii. to generate an informative com- pression, the weight of edges connecting salient 

occur within a sentence. Edge weights are the num- ber of times two words co-occur. TextRank (Mihal- cea and Tarau, 2004), a graph-based ranking algo- rithm that takes into account edge weights, is ap- plied for computing a salience score for each node. 
The score for node Vi is initialized with a default 
value and is computed in an iterative manner until 
convergence using this equation: 

                              wji 
                                          
nodes is decreased. 
  A K-shortest paths algorithm is then used to find the 50 shortest paths from start to end nodes in the 

S(Vi) = (1?d)+d??
                      Vj?adj(Vi) 
                      

Vk?adj(Vi) wjk 

S(Vi) 

graph. Paths shorter than eight words or that do not contain a verb are filtered. The remaining paths are reranked by normalizing the total path weight over its length. The path which has the lightest average edge weight is then considered as the best compres- sion. 

where adj(Vi) denotes the neighbors of Vi and d is 
the damping factor set to 0.85. 
  The second step consists in generating and scor- ing keyphrase candidates. Sequences of adja- cent words satisfying a specific syntactic pattern are collapsed into multi-word phrases. We use 
(ADJ)*(NPP|NC)+(ADJ)* for French, in which 

3.2 	Reranking paths using keyphrases 	ADJ are adjectives, NPP are proper nouns and NC 

The main difficulty of MSC is to generate sentences 
that are both informative and grammatically correct. Here, redundancy within the set of input sentences is used to identify important words and salient links between words. Although this approach seemingly works well, important information is missing in 48% 

are common nouns. 
  The score of a candidate keyphrase k is computed by summing the salience scores of the words it con- tains normalized by its length + 1 to favor longer n-grams (see equation 3). 
  
to 60% of the generated sentences (Filippova, 2010). One of the reasons for this is that node salience 

score(k) = 

w?k TextRank(w) 
length(k) + 1 

(3) 

is estimated only with the frequency measure. To tackle this issue, we propose to rerank the N-best list of compressions using keyphrases extracted from the set of related sentences. Intuitively, an infor- mative sentence should contain the most relevant keyphrases. We propose to rerank generated com- pressions according to the number and relevance of keyphrases they contain. 
  An unsupervised method based on (Wan and Xiao, 2008) is used to extract keyphrases from each set of related sentences. This method is based on the assumption that a word recommends other co- occurring words, and the strength of the recommen- 
  
The small vocabulary size as well as the high redundancy within the set of related sentences are two factors that make keyphrase extraction easier to achieve. On the other hand, a large number of the generated keyphrases are redundant. Some keyphrases may be contained within larger ones, e.g. giant tortoise and Pinta Island giant tortoise. To solve this problem, generated keyphrases are clus- tered using word overlap. For each cluster, we then select the keyphrase with the highest score. This fil- tering process enables the generation of a smaller subset of keyphrases while having a better coverage of the cluster content. 
  
  
  Reranking techniques can suffer from the limited 
scope of the N-best list, which may rule out many potentially good candidates. For this reason, we use a larger number of paths than the one in (Filippova, 2010). Accordingly, the K-shortest paths algorithm is used to find the 200 shortest paths. We rerank the paths by normalizing the total path weight over its length multiplied by the sum of keyphrase scores it contains. The score of a sentence compression c is 
given by: 

carefully read the set of sentences, extract the most 
salient facts and generate a sentence (compression) that summarize the set of sentences. Annotators were also told to introduce as little new vocabu- lary as possible in their compressions. The purpose of this guideline is to reduce the number of possi- ble mismatches, as existing evaluation metrics are based on n-gram comparison. Reference compres- sions have a compression rate of 60%. 

                          4.2 	Automatic evaluation 
i,j?path(c) w(i,j) 



4

score(c) = length(c)???

 Experimental settings 

k?c score(k) 

(4) 

The use of automatic methods for evaluating 
machine-generated text has gradually become the mainstream in Computational Linguistics. Well known examples are the ROUGE (Lin, 2004) and 

4.1 	Construction of the evaluation dataset 	BLEU (Papineni et al., 2002) evaluation metrics used 
                                              in the summarization and MT communities. These 
                                              
To our knowledge, there is no dataset available to 
evaluate MSC in an automatic way. The perfor- mance of the previously described approaches was assessed by human judges. In this work, we intro- duce a new evaluation dataset made of 40 sets of re- lated sentences along with reference compressions composed by human assessors. The purpose of this dataset is to investigate the use of existing automatic evaluation metrics for the MSC task. 
  Similar to (Filippova, 2010), we collected news articles presented in clusters on the French edition of Google News2 over a period of three months. Clus- ters composed of at least 20 news articles and con- taining one single prevailing event were manually selected. To obtain the sets of related sentences, we extracted the first sentences from each article in the cluster, removing duplicates. Leading sentences in news articles are known to provide a good summary 

metrics assess the quality of a system output by com- puting its similarity to one or more human-generated references. 
  Prior work in sentence compression use the F1 
measure over grammatical relations to evaluate can- didate compressions (Riezler et al., 2003). It was shown to correlate significantly with human judg- ments (Clarke and Lapata, 2006) and behave sim- ilarly to BLEU (Unno et al., 2006). However, this metric is not entirely reliable as it depends on parser accuracy and the type of dependency relations used (Napoles et al., 2011). In this work, the fol- lowing evaluation measures are considered relevant: BLEU3, ROUGE-1 (unigrams), ROUGE-2 (bigrams) and ROUGE-SU4 (bigrams with skip distance up to 4 words)4. ROUGE measures are computed using stopword removal and French stemming 5. 

of the article content and are used as a baseline in summarization (Dang, 2005). 

4.3 

Manual evaluation 

  The resulting dataset contains 618 sentences (33 tokens on average) spread over 40 clusters. The number of sentences within each cluster is on av- erage 15, with a minimum of 7 and a maximum of 36. The word redundancy rate within the dataset, computed as the number of unique words over the number of words for each cluster, is 38.8%. 
  Three reference compressions were manually composed for each set of sentences. Human an- notators, all native French speakers, were asked to 
  
     2http://news.google.fr 

The quality of the generated compressions was as- 
sessed in an experiment with human raters. Two as- pects were considered: grammaticality and informa- tivity. Following previous work (Barzilay and McK- eown, 2005), we asked raters to assess grammati- cality on a 3-points scale: perfect (2 pts), if the com- pression is a complete grammatical sentence; almost 

     3ftp://jaguar.ncsl.nist.gov/mt/ 
resources/mteval-v13a.pl 
     4We use the version 1.5.5 of the ROUGE package available 
from http://www.berouge.com 
     5http://snowball.tartarus.org/ 
   
   
(1 pt), if it requires minor editing, e.g. one mistake 
in articles, agreement or punctuation; ungrammati- cal (0 pts), if it is none of the above. Raters were ex- 

Method Gram. Info. 
   
Length 
Avg. Std.Dev. 

CompR 

plicitly asked to ignore lack of capitalization while 	Baseline 	1.63 	1.33 16.3 	4.8 	50% evaluating grammaticality. 	KeyRank 	1.53 	1.60† 19 	6.1 	58% 
  Informativity is evaluated according to the 3- 
  
points scale defined in (Filippova, 2010): perfect (2 pts), if the compression conveys the gist of the main event and is more or less like the summary the per- son would produce himself; related (1 pt), if it is related to the the main theme but misses something important; unrelated (0 pts), if the compression is not related to the main theme. 

Table 1: Average ratings over all clusters and raters along 
with average compression length (in tokens), standard de- viation and corresponding compression rate († indicates significance at the 0.01 level using Student's t-test). 


tences are perfectly grammatical. 

  Three raters, all native French speakers, were 
hired to assess the generated compressions. 

Method 



0

Gram. 
  1
  

  
2



0

Info. 
  1
  

 
2


5


Results 

Baseline 9.2% 18.3% 72.5% 10.0% 46.7% 43.3% 
KeyRank 11.7% 23.3% 65.0% 2.5% 35.0% 62.5% 

To evaluate the effectiveness of our method, we 
compare the compressions generated with Filip- pova's approach (denoted as baseline) against the ones obtained by reranking paths using keyphrases (denoted as KeyRank). We evaluated the agreement between the three raters using Fleiss's kappa (Art- stein and Poesio, 2008). The ? value is 0.56 which denotes a moderate agreement. 
  Table 1 presents the average grammaticality and 
informativity scores. Results achieved by the base- line are consistent with the ones presented in (Fil- ippova, 2010). We observe a significant improve- ment in informativity for KeyRank. Grammaticality scores are, however, slightly decreased. One reason for that is the reranking we added to the shortest path method that outputs longer compressions. The aver- age length for our method is nevertheless drastically shorter than the average length of the input sentences 


Table 2: Distribution over possible manual ratings for grammaticality and informativity. Ratings are expressed on a scale of 0 to 2. 

  Table 3 shows the performance of the baseline and our reranking method in terms of ROUGE and BLEU scores. KeyRank significantly outperforms the baseline according to the different ROUGE met- rics. This indicates an improvement in informativity for the compressions generated using our method. We observe a large but not significant increase in BLEU scores. The slightly decreased grammatical- ity scores could be a reason for this. BLEU is essen- tially a precision metric, and it measures how well a compression candidate overlaps with multiple refer- ences. Longer n-grams used by BLEU6 tend to score for grammaticality rather than content. 
  
(19 vs. 33 tokens). This corresponds to a compres- sion rate (58%) that is close to the one observed on reference compressions (60%). 
  Table 2 shows the distributions over the three 
scores for both grammaticality and informativity. We observe that 97.5% of the compressions gener- 

Metric 
RO U G E - 1 
RO U G E - 2 
RO U G E - S U 4 
BLEU 

Baseline 
0.57441 
0.39212 0.37004 0.61560 

KeyRank 
0.65677‡?
0.44140†?0.43443‡?0.65770 

ated with KeyRank are related to the main theme of the cluster, and 62.5% convey the very gist of it without missing any important information. This represents an absolute increase of 19.2% over the baseline. Although our reranking method has lower 

Table 3: Automatic evaluation scores († and?‡ indicate 
significance at the 0.01 and 0.001 levels respectively us- 
ing Student's t-test) 

  To assess the effectiveness of automatic evalua- 
  
grammaticality scores, 65% of the generated sen- 

6 BLEU 

measures are computed using 4-grams. 


tion metrics, we compute the Pearson's correlation 
coefficient between ROUGE and BLEU scores and averaged manual ratings. According to Table 4, re- sults show medium to strong correlation between ROUGE scores and informativity ratings. On the other hand, BLEU scores better correlate with gram- maticality ratings. Overall, automatic evaluation 
  
In future work, we intend to examine how gram- 
maticality of the generated compressions can be en- hanced. Similar to the work of Hasan et al. (2006) in the Machine Translation field, we plan to experiment with high order POS language models reranking. 

Acknowledgments 

metrics are not highly correlated with manual rat- 	The authors would like to thank Sebasti´ Pe˜ Sal- an na 

ings. One reason for that may be that the manual 
score assignments are arbitrary (i.e. 0, 1, 2), and that a score of one is in fact closer to two than to zero. Results suggest that automatic metrics do give an in- dication of the compression quality, but can not re- place manual evaluation. 

darriaga and Ophelie ´ Lacroix for helpful comments on this work. We thank the anonymous reviewers for their useful comments. This work was supported by the French Agence Nationale de la Recherche under grant ANR-12-CORD-0027 and by the French Re- gion Pays de Loire in the context of the DEPART project (http://www.projetdepart.org/). 

Metric 
RO U G E - 1 
RO U G E - 2 
RO U G E - S U 4 
BLEU 

Gram. 
0.402 
0.432 0.386 0.444 

Info. 
0.591 
0.494 0.542 0.401 



References 
R. Artstein and M. Poesio. 2008. Inter-coder agreement 
for computational linguistics. Computational Linguis- tics, 34(4):555-596. 
Regina Barzilay and Kathleen R. McKeown. 2005. Sen- 

Table 4: Pearson correlation coefficients for automatic 
metrics vs. average human ratings. 

tence fusion for multidocument news summarization. Computational Linguistics, 31(3):297-328. 
James Clarke and Mirella Lapata. 2006. Models for 
  sentence compression: A comparison across domains, 
  
6

Conclusion 

training requirements and evaluation measures. In 

This paper presented a multi-sentence compres- 
sion approach that uses keyphrases to generate more informative compressions. We extended Fil- ippova (2010)'s word graph-based MSC approach by adding a re-reranking step that favors compres- sions that contain the most relevant keyphrases of the input sentence set. An implementation of the proposed multi-sentence compression approach is available for download7. We constructed an eval- uation dataset made of 40 sets of related sentences along with reference compressions composed by hu- mans. This dataset is freely available for download8. We performed both manual and automatic evalua- tions and showed that our method significantly im- proves the informativity of the generated compres- sions. We also investigated the correlation between manual and automatic evaluation metrics and found that ROUGE and BLEU have a medium correlation with manual ratings. 

7https://github.com/boudinfl/takahe 
8https://github.com/boudinfl/lina-msc 

Proceedings of the 21st International Conference on 
Computational Linguistics and 44th Annual Meet- 
ing of the Association for Computational Linguistics, 
pages 377-384, Sydney, Australia, July. Association for Computational Linguistics. 
Hoa Trang Dang. 2005. Overview of duc 2005. In Pro- 
  ceedings of the Document Understanding Conference. 
Ernesto D'Avanzo and Bernardo Magnini. 2005. A 
keyphrase-based approach to summarization: the lake system at duc-2005. In Proceedings of the Document Understanding Conference. 
Micha Elsner and Deepak Santhanam. 2011. Learning to 
fuse disparate sentences. In Proceedings of the Work- shop on Monolingual Text-To-Text Generation, pages 54-63, Portland, Oregon, June. Association for Com- putational Linguistics. 
Katja Filippova and Michael Strube. 2008. Sentence fu- 
sion via dependency graph compression. In Proceed- 
ings of the 2008 Conference on Empirical Methods in 
Natural Language Processing, pages 177-185, Hon- 
olulu, Hawaii, October. Association for Computational Linguistics. 
Katja Filippova. 2010. Multi-Sentence Compression: 
  Finding Shortest Paths in Word Graphs. In Proceed- 
  
  
ings of the 23rd International Conference on Com- 
putational Linguistics (Coling 2010), pages 322-330, 
Beijing, China, August. Coling 2010 Organizing Com- mittee. 
Eibe Frank, Gordon W. Paynter, Ian H. Witten, Carl 

Kishore Papineni, Salim Roukos, Todd Ward, and Wei- 
Jing Zhu. 2002. Bleu: a method for automatic eval- uation of machine translation. In Proceedings of 40th 
Annual Meeting of the Association for Computational 
Linguistics, pages 311-318, Philadelphia, Pennsylva- 

Gutwin, and Craig G. Nevill-Manning. 
Domain-specific keyphrase extraction. 

1999. 

nia, USA, July. Association for Computational Lin- 
guistics. 

Kavita Ganesan, ChengXiang Zhai, and Jiawei Han. 
2010. Opinosis: A Graph Based Approach to Abstrac- tive Summarization of Highly Redundant Opinions. In 
Proceedings of the 23rd International Conference on 
Computational Linguistics (Coling 2010), pages 340- 
348, Beijing, China, August. Coling 2010 Organizing Committee. 
S. Hasan, O. Bender, and H. Ney. 2006. Reranking trans- 
lation hypotheses using structural properties. In Pro- 
ceedings of the EACL Workshop on Learning Struc- 
tured Information in Natural Language Applications, 
pages 41-48. 
Hongyan Jing. 2000. Sentence reduction for auto- 
matic text summarization. In Proceedings of the Sixth Conference on Applied Natural Language Processing, pages 310-315, Seattle, Washington, USA, April. As- sociation for Computational Linguistics. 
Su Nam Kim, Olena Medelyan, Min-Yen Kan, and Timo- 
thy Baldwin. 2010. Semeval-2010 task 5 : Automatic keyphrase extraction from scientific articles. In Pro- 
ceedings of the 5th International Workshop on Seman- 

Stefan Riezler, Tracy H. King, Richard Crouch, and An- 
nie Zaenen. 2003. Statistical sentence condensation using ambiguity packing and stochastic disambigua- tion methods for lexical-functional grammar. In Pro- 
ceedings of the 2003 Conference of the North Ameri- 
can Chapter of the Association for Computational Lin- 
guistics on Human Language Technology-Volume 1, 
pages 118-125. Association for Computational Lin- guistics. 
Beaux Sharifi, Mark-Anthony Hutton, and Jugal Kalita. 
2010. Summarizing Microblogs Automatically. In 
Human Language Technologies: The 2010 Annual 
Conference of the North American Chapter of the As- 
sociation for Computational Linguistics, pages 685- 
688, Los Angeles, California, June. Association for Computational Linguistics. 
Takashi Tomokiyo and Matthew Hurst. 2003. A lan- 
guage model approach to keyphrase extraction. In 
Proceedings of the ACL 2003 Workshop on Multi- 
word Expressions: Analysis, Acquisition and Treat- 
ment, pages 33-40, Sapporo, Japan, July. Association 
for Computational Linguistics. 

tic Evaluation, pages 21-26, Uppsala, Sweden, July. 

Peter D. Turney. 

2000. 

Learning algorithms 

  Association for Computational Linguistics. 
Chin-Yew Lin. 2004. Rouge: A package for automatic 

for keyphrase extraction. 2(4):303-336. 

Information Retrieval, 

evaluation of summaries. In Stan Szpakowicz Marie- 
Francine Moens, editor, Text Summarization Branches Out: Proceedings of the ACL-04 Workshop, pages 74- 81, Barcelona, Spain, July. Association for Computa- tional Linguistics. 
Zhiyuan Liu, Peng Li, Yabin Zheng, and Maosong Sun. 
2009. Clustering to find exemplar terms for keyphrase extraction. In Proceedings of the 2009 Conference 
on Empirical Methods in Natural Language Process- 
ing, pages 257-266, Singapore, August. Association 
for Computational Linguistics. 
Rada Mihalcea and Paul Tarau. 2004. Textrank: Bring- 
ing order into texts. In Dekang Lin and Dekai Wu, editors, Proceedings of EMNLP 2004, pages 404-411, Barcelona, Spain, July. Association for Computational Linguistics. 
Courtney Napoles, Benjamin Van Durme, and Chris 
Callison-Burch. 2011. Evaluating sentence compres- sion: Pitfalls and suggested remedies. In Proceedings 
of the Workshop on Monolingual Text-To-Text Gener- 
ation, pages 91-97, Portland, Oregon, June. Associa- 
tion for Computational Linguistics. 

Yuya Unno, Takashi Ninomiya, Yusuke Miyao, and 
Jun'ichi Tsujii. 2006. Trimming cfg parse trees for sentence compression using machine learning ap- proaches. In Proceedings of the COLING/ACL 2006 Main Conference Poster Sessions, pages 850-857, Sydney, Australia, July. Association for Computa- tional Linguistics. 
Xiaojun Wan and Jianguo Xiao. 2008. Collabrank: 
Towards a collaborative approach to single-document keyphrase extraction. In Proceedings of the 22nd In- 
ternational Conference on Computational Linguistics 
(Coling 2008), pages 969-976, Manchester, UK, Au- 
gust. Coling 2008 Organizing Committee. 
Dingding Wang, Tao Li, Shenghuo Zhu, and Chris Ding. 
2008. Multi-document Summarization via Sentence- Level Semantic Analysis and Symmetric Matrix Fac- torization. In Proceedings of the 31st annual inter- 
national ACM SIGIR conference on Research and de- 
velopment in information retrieval, SIGIR '08, pages 
307-314, New York, NY, USA. ACM. 

